// // Anonymizer
// // Using OLOO create an Account prototype object that anonymizes user objects on init. The created object should not have access to the function that anonymizes a user other than through the init and reanonymize methods. The function that anonymizes creates a 16 character sequence composed of letters and numbers. The following are the properties and methods on the Account object:

// // init: The init method sets the email, password, firstName, lastName, and displayName of user. The displayName is a 16 character sequence generated for the user. It's used as the display name of a user.
// // reanonymize: This method generates a new 16 character sequence and reassigns it to the displayName property if the password provided is valid. Returns true if successfully re-anonymized. Returns 'Invalid Password' if the password provided is not valid.
// // resetPassword: This method asks the user for a new password and reassigns it to the password property. To reset the password, the user must provide the current password. Returns 'Invalid Password' if the password provided is not valid. Returns true if the password is successfully reset.
// // firstName: This method returns the first name of the user if the password provided is valid. Returns 'Invalid Password' if the password provided is not valid.
// // lastName: This method returns the last name of the user if the password provided is valid. Returns 'Invalid Password' if the password provided is not valid.
// // email: This method returns the email name of the user if the password provided is valid. Returns 'Invalid Password' if the password provided is not valid.
// // displayName: This property returns the displayName â€” the 16 character sequence.
// // Other than the above properties, methods, and properties inherited from Object.prototype, no other method or property should exist on the object returned by the Account prototype object.

// // Here's a sample for your reference:

// /*
// We need to create an Accoutn prototype object that represents a users account.
// This account has private data and behavior including:
// - email
// - password
// - firstName
// - lastName

// - anonymizer

// Public behavior:
// - init
//   - takes all args and assigns them to varialbes as private data
//   - creates the display name property which is the random number generated by anonymizer
// - reanonymize
// - resetPassword
// - firstName
// - lastName
// - email
// - displayName

// In order to accomplish this, we need to use an IIFE to return an object who's methods have access to the private data
// The crux is displayName
//   - not private var but an object property that can be accessed from outside
//   - is created upon init by calling anonymize
//   - can only be changed from outside by calling reanonymize

// FEX
// The new problem is that when we create a more than one object, they are all the same object and are simply overriding eachother
// How do we get our IIFE to return a new object each time rather than the same object?

// */

// let Account = function() {
//   let userEmail;
//   let userPassword;
//   let userFirstName;
//   let userLastName;

//   function getRandomLetterNumber() {
//     const randomIndex = Math.floor(Math.random() * 62);
//     return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRTSUVWXYZ1234567890'[randomIndex];
//   }

//   function anonymize() {
//     let result = '';

//     for (let i = 0; i < 16; i += 1) {
//       result += getRandomLetterNumber();
//     }

//     return result;
//   }

//   function isValidPassword(password) {
//     return userPassword === password
//   }

//   return {
//     init(email, password, firstName, lastName) {
//       userEmail = email;
//       userPassword = password;
//       userFirstName = firstName;
//       userLastName = lastName;
//       this.displayName = anonymize();

//       return this;
//     }, 
  
//     reanonymize(password) {
//       if (isValidPassword(password)) {
//         this.displayName = anonymize();
//         return true;
//       } else {
//         return 'Invalid Password';
//       }
//     },
  
//     resetPassword(password, newPassword) {
//       if (isValidPassword(password)) {
//         userPassword = newPassword;
//         return true;
//       } else {
//         return 'Invalid Password';
//       }
//     },

//     email(password) {
//       if (isValidPassword(password)) {
//         return userEmail;
//       } else {
//         return 'Invalid Password';
//       }
//     },

//     firstName(password) {
//       if (isValidPassword(password)) {
//         return userFirstName;
//       } else {
//         return 'Invalid Password';
//       }
//     },

//     lastName(password) {
//       if (isValidPassword(password)) {
//         return userLastName;
//       } else {
//         return 'Invalid Password';
//       }
//     },
//   }; 
// }();

// // const fooBar = Object.create(Account).init('foo@bar.com', '123456', 'foo', 'bar');
// // console.log(fooBar.firstName);                     // returns the firstName function
// // console.log(fooBar.email);                         // returns the email function
// // console.log(fooBar.firstName('123456'));           // logs 'foo'
// // console.log(fooBar.firstName('abc'));              // logs 'Invalid Password'
// // console.log(fooBar.displayName);                   // logs 16 character sequence
// // console.log(fooBar.displayName);                   // logs 16 character sequence // upon init, display name has been set so it is returning display name, not setting it
// // console.log(fooBar.resetPassword('123', 'abc'))    // logs 'Invalid Password';
// // console.log(fooBar.resetPassword('123456', 'abc')) // logs true

// // const displayName = fooBar.displayName;            // assigns display name to displayName
// // console.log(displayName);                          // logs displayName
// // fooBar.reanonymize('abc');                         // returns true // fooBar now has a new displayName
// // console.log(fooBar.displayName);                   // logs new 16 character sequence
// // console.log(displayName === fooBar.displayName);   // logs false

// const fooBar = Object.create(Account).init('foo@bar.com', '123456', 'foo', 'bar');
// console.log(fooBar.firstName);                     // returns the firstName function
// console.log(fooBar.email);                         // returns the email function
// console.log(fooBar.firstName('123456'));           // logs 'foo'
// console.log(fooBar.firstName('abc'));              // logs 'Invalid Password'
// console.log(fooBar.displayName);                   // logs 16 character sequence
// console.log(fooBar.resetPassword('123', 'abc'))    // logs 'Invalid Password';
// console.log(fooBar.resetPassword('123456', 'abc')) // logs true

// const displayName = fooBar.displayName;
// fooBar.reanonymize('abc');                         // returns true
// console.log(displayName === fooBar.displayName);   // logs false

// const bazQux = Object.create(Account).init('baz@qux.com', '123456', 'baz', 'qux');
// console.log(fooBar.firstName('abc'));              // logs 'baz' but should log foo.
// console.log(fooBar.email('abc'));                  // 'baz@qux.com' but should 'foo@bar.com'


let Person = function() {
  let personName;

  return {
    init(name) {
      personName = name;
      return this;
    },

    sayHi() {
      console.log(`Hello there, my name is ${personName}!`);
    },
  };
}();

let drew = Object.create(Person).init('drew');
drew.sayHi();

let fred = Object.create(Person).init('fred');
drew.sayHi();
fred.sayHi();

